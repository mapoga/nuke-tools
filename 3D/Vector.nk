Group {
 name Vector
 knobChanged "n = nuke.thisNode()\nk = nuke.thisKnob()\n\ndef value(vis):\n  if(vis==True):\n\tn.knob(\"constant\").setVisible(True)\n\tn.knob(\"uniform\").setVisible(True)\n\tif(n.knob(\"constant\").value()==True):\n\t  if(n.knob(\"uniform\").value()==True):\n\t\tn.knob(\"value\").setVisible(True)\n\t\tn.knob(\"value2\").setVisible(False)\n\t\tn.knob(\"value3\").setVisible(False)\n\t  else:\n\t\tn.knob(\"value\").setVisible(False)\n\t\tif(n.knob(\"size\").value()==\"2\"):\n\t\t  n.knob(\"value2\").setVisible(True)\n\t\t  n.knob(\"value3\").setVisible(False)\n\t\telif(n.knob(\"size\").value()==\"3\"):\n\t\t  n.knob(\"value2\").setVisible(False)\n\t\t  n.knob(\"value3\").setVisible(True)\n\telse:\n\t  n.knob(\"value\").setVisible(False)\n\t  n.knob(\"value2\").setVisible(False)\n\t  n.knob(\"value3\").setVisible(False)\n\t  n.knob(\"uniform\").setVisible(False)\n  else:\n\tn.knob(\"constant\").setVisible(False)\n\tn.knob(\"value\").setVisible(False)\n\tn.knob(\"value2\").setVisible(False)\n\tn.knob(\"value3\").setVisible(False)\n\tn.knob(\"uniform\").setVisible(False)\n\ndef transform(vis):\n  n.knob(\"transform_order\").setVisible(False)\n  n.knob(\"rotation_order3\").setVisible(False)\n  n.knob(\"rotateunit\").setVisible(False)\n  n.knob(\"constant_trans\").setVisible(False)\n  n.knob(\"translate2\").setVisible(False)\n  n.knob(\"translate3\").setVisible(False)\n  n.knob(\"rotate\").setVisible(False)\n  n.knob(\"rotate3\").setVisible(False)\n  n.knob(\"scale2\").setVisible(False)\n  n.knob(\"scale3\").setVisible(False)\n  n.knob(\"uniformScale\").setVisible(False)\n  n.knob(\"invert\").setVisible(False)\n  n.knob(\"angleBetweenAxis\").setVisible(False)\n  n.knob(\"angleConvertFrom\").setVisible(False)\n  n.knob(\"angleConvertTo\").setVisible(False)\n\n  if(vis==True):\n\tn.knob(\"invert\").setVisible(True)\n\tif(n.knob(\"transform_op\").value()==\"transform\"):\n\t  n.knob(\"transform_order\").setVisible(True)\n\telse:\n\t  n.knob(\"constant_trans\").setVisible(True)\n\n\tif(n.knob(\"transform_op\").value()==\"translate\" or n.knob(\"transform_op\").value()==\"transform\"):\n\t  if(n.knob(\"constant_trans\").value()==True or n.knob(\"transform_op\").value()==\"transform\"):\n\t\tif(n.knob(\"size\").value()==\"2\"):\n\t\t  n.knob(\"translate2\").setVisible(True)\n\t\telse:\n\t\t  n.knob(\"translate3\").setVisible(True)\n\tif(n.knob(\"transform_op\").value()==\"rotate\" or n.knob(\"transform_op\").value()==\"transform\"):\n\t  n.knob(\"rotateunit\").setVisible(True)\n\t  if(n.knob(\"constant_trans\").value()==True or n.knob(\"transform_op\").value()==\"transform\"):\n\t\tif(n.knob(\"size\").value()==\"2\"):\n\t\t  n.knob(\"rotate\").setVisible(True)\n\t\telse:\n\t\t  n.knob(\"rotate3\").setVisible(True)\n\t  if(n.knob(\"size\").value()==\"3\"):\n\t\tn.knob(\"rotation_order3\").setVisible(True)\n\tif(n.knob(\"transform_op\").value()==\"scale\" or n.knob(\"transform_op\").value()==\"transform\"):\n\t  if(n.knob(\"constant_trans\").value()==True or n.knob(\"transform_op\").value()==\"transform\"):\n\t\tn.knob(\"uniformScale\").setVisible(True)\n\t\tif(n.knob(\"size\").value()==\"2\"):\n\t\t  n.knob(\"scale2\").setVisible(True)\n\t\telse:\n\t\t  n.knob(\"scale3\").setVisible(True)\n\ndef size(s):\n  if(s==\"2\"):\n\tn.knob(\"value2\").setVisible(n.knob(\"value3\").visible())\n\tn.knob(\"translate2\").setVisible(n.knob(\"translate3\").visible())\n\tn.knob(\"rotate\").setVisible(n.knob(\"rotate3\").visible())\n\tn.knob(\"scale2\").setVisible(n.knob(\"scale3\").visible())\n\n\tn.knob(\"value3\").setVisible(False)\n\tn.knob(\"rotation_order3\").setVisible(False)\n\tn.knob(\"translate3\").setVisible(False)\n\tn.knob(\"rotate3\").setVisible(False)\n\tn.knob(\"scale3\").setVisible(False)\n\n\tn.knob(\"angleBetweenAxis\").setVisible(False)\n\tif(n.knob(\"category\").value()==\"math\"):\n\t  n.knob(\"math_op2\").setVisible(True)\n\t  n.knob(\"math_op3\").setVisible(False)\n\t  try:\n\t\tn.knob(\"math_op2\").setValue(n.knob(\"math_op3\").value())\n\t  except:\n\t\tpass\n  elif(s==\"3\"):\n\tn.knob(\"value3\").setVisible(n.knob(\"value2\").visible())\n\tn.knob(\"rotation_order3\").setVisible(n.knob(\"rotate\").visible())\n\tn.knob(\"translate3\").setVisible(n.knob(\"translate2\").visible())\n\tn.knob(\"rotate3\").setVisible(n.knob(\"rotate\").visible())\n\tn.knob(\"scale3\").setVisible(n.knob(\"scale2\").visible())\n\n\tn.knob(\"value2\").setVisible(False)\n\tn.knob(\"translate2\").setVisible(False)\n\tn.knob(\"rotate\").setVisible(False)\n\tn.knob(\"scale2\").setVisible(False)\n\n\tif(n.knob(\"category\").value()==\"utility\"):\n\t  if(n.knob(\"utility_op\").value()==\"angle between\"):\n\t\tn.knob(\"angleBetweenAxis\").setVisible(True)\n\n\tif(n.knob(\"category\").value()==\"math\"):\n\t  n.knob(\"math_op2\").setVisible(False)\n\t  n.knob(\"math_op3\").setVisible(True)\n\t  n.knob(\"math_op3\").setValue(n.knob(\"math_op2\").value())\n\ndef uniform():\n  if(n.knob(\"uniform\").value()==True):\n\tn.knob(\"value\").setVisible(True)\n\tn.knob(\"value2\").setVisible(False)\n\tn.knob(\"value3\").setVisible(False)\n  else:\n\tn.knob(\"value\").setVisible(False)\n\tif(n.knob(\"size\").value()==\"2\"):\n\t\tn.knob(\"value2\").setVisible(True)\n\t\tn.knob(\"value3\").setVisible(False)\n\telse:\n\t\tn.knob(\"value2\").setVisible(False)\n\t\tn.knob(\"value3\").setVisible(True)\n\ndef label():\n  sizes = \[\"v2\", \"v3\"]\n  categories = \[\"init\", \"math\", \"trs\",\"util\"]\n  math = \[\"add\", \"sub\",\"mult\", \"div\", \"mod\", \"norm\", \"len\", \"dot\", \"cros\"]\n  trans = \[\"pos\", \"rot\", \"scale\", \" \"]\n  utils = \[\"dist\", \"angle\", \"conv\"]\n  string = \"\"\n  string += sizes\[int(n.knob(\"size\").getValue())]\n  string += \" \"\n  string += categories\[int(n.knob(\"category\").getValue())]\n  string += \" \"\n  if(n.knob(\"category\").value() == \"math\"):\n\tif(n.knob(\"size\").value() == \"2\"):\n\t  string += math\[int(n.knob(\"math_op2\").getValue())]\n\telse:\n\t  string += math\[int(n.knob(\"math_op3\").getValue())]\n  elif(n.knob(\"category\").value() == \"transform\"):\n\tstring += trans\[int(n.knob(\"transform_op\").getValue())]\n  elif(n.knob(\"category\").value() == \"utility\"):\n\tstring += utils\[int(n.knob(\"utility_op\").getValue())]\n\n  n.knob(\"label\").setValue(string)\n\nlabel()\nif(k.name()==\"size\"):\n  size(k.value())\nelif(k.name()==\"category\"):\n  n.knob(\"math_op2\").setVisible(False)\n  n.knob(\"math_op3\").setVisible(False)\n  n.knob(\"transform_op\").setVisible(False)\n  n.knob(\"utility_op\").setVisible(False)\n  if(k.value()==\"initialize\"):\n\tvalue(True)\n\ttransform(False)\n  elif(k.value()==\"math\"):\n\ttransform(False)\n\tif(n.knob(\"size\").value()==\"2\"):\n\t  n.knob(\"math_op2\").setVisible(True)\n\t  n.knob(\"math_op3\").setVisible(False)\n\telse:\n\t  n.knob(\"math_op2\").setVisible(False)\n\t  n.knob(\"math_op3\").setVisible(True)\n\tif(n.knob(\"math_op3\").value()==\"normalize\" or n.knob(\"math_op3\").value()==\"length\"):\n\t  value(False)\n\telse:\n\t  value(True)\n  elif(k.value()==\"transform\"):\n\tn.knob(\"transform_op\").setVisible(True)\n\tvalue(False)\n\ttransform(True)\n  elif(k.value()==\"utility\"):\n\tn.knob(\"utility_op\").setVisible(True)\n\ttransform(False)\n\tvalue(True)\nelif(k.name()==\"math_op2\" and n.knob(\"category\").value()==\"math\"):\n\ttransform(False)\n\tif(n.knob(\"math_op2\").value()==\"normalize\" or n.knob(\"math_op2\").value()==\"length\"):\n\t  value(False)\n\telse:\n\t  value(True)\nelif(k.name()==\"math_op3\" and n.knob(\"category\").value()==\"math\"):\n\ttransform(False)\n\tif(n.knob(\"math_op3\").value()==\"normalize\" or n.knob(\"math_op3\").value()==\"length\"):\n\t  value(False)\n\telse:\n\t  value(True)\nelif(k.name()==\"transform_op\" and n.knob(\"category\").value()==\"transform\"):\n\tvalue(False)\n\ttransform(True)\nelif(k.name()==\"utility_op\" and n.knob(\"category\").value()==\"utility\"):\n  value(True)\n  if(k.value()==\"angle between\" and n.knob(\"size\").value()==\"3\"):\n\tn.knob(\"angleBetweenAxis\").setVisible(True)\n  else:\n\tn.knob(\"angleBetweenAxis\").setVisible(False)\n  if(k.value()==\"angle convert\"):\n\tn.knob(\"angleConvertFrom\").setVisible(True)\n\tn.knob(\"angleConvertTo\").setVisible(True)\n\tvalue(False)\n  else:\n\tn.knob(\"angleConvertFrom\").setVisible(False)\n\tn.knob(\"angleConvertTo\").setVisible(False)\nelif(k.name()==\"constant\"):\n  if(k.value()==False):\n\tn.knob(\"value\").setVisible(False)\n\tn.knob(\"value2\").setVisible(False)\n\tn.knob(\"value3\").setVisible(False)\n\tn.knob(\"uniform\").setVisible(False)\n  else:\n\tn.knob(\"uniform\").setVisible(True)\n\tuniform()\nelif(k.name()==\"uniform\"):\n  uniform()\nelif(k.name()==\"constant_trans\"):\n  transform(True)\n"
 label "v3 trs  "
 note_font Verdana
 selected true
 addUserKnob {20 User}
 addUserKnob {26 vector_div l vector}
 addUserKnob {4 size -STARTLINE M {2 3}}
 size 3
 addUserKnob {6 isolate -STARTLINE}
 isolate true
 addUserKnob {26 operation_div l "             operation"}
 addUserKnob {4 category M {initialize math transform utility "" "" ""}}
 category transform
 addUserKnob {4 math_op3 l operation -STARTLINE +HIDDEN M {add substract multiply divide modulo normalize length dot cross ""}}
 math_op3 normalize
 addUserKnob {4 math_op2 l operation -STARTLINE +HIDDEN M {add substract multiply divide modulo normalize length dot "" ""}}
 math_op2 normalize
 addUserKnob {4 transform_op l operation -STARTLINE M {translate rotate scale transform "" "" ""}}
 transform_op transform
 addUserKnob {4 utility_op l operation -STARTLINE +HIDDEN M {distance "angle between" "angle convert" ""}}
 utility_op "angle convert"
 addUserKnob {6 constant +HIDDEN +STARTLINE}
 addUserKnob {6 uniform -STARTLINE +HIDDEN}
 addUserKnob {7 value +HIDDEN}
 addUserKnob {12 value2 l value +HIDDEN}
 addUserKnob {13 value3 l value +HIDDEN}
 addUserKnob {6 blop_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {4 transform_order l transfrom_order M {SRT STR RST RTS TSR TRS "" "" "" "" "" "" ""}}
 addUserKnob {4 rotation_order3 l "rotation order" M {XYZ XZY YXZ YZX ZXY ZYX}}
 rotation_order3 ZXY
 addUserKnob {4 rotateunit l unit M {degrees radians "" "" ""}}
 addUserKnob {6 constant_trans l constant +HIDDEN +STARTLINE}
 addUserKnob {12 translate2 l translate +HIDDEN}
 addUserKnob {13 translate3 l translate}
 addUserKnob {7 rotate +HIDDEN R 0 360}
 addUserKnob {13 rotate3 l rotate}
 addUserKnob {12 scale2 l scale +HIDDEN}
 scale2 {1 1}
 addUserKnob {13 scale3 l scale}
 scale3 {1 1 1}
 addUserKnob {7 uniformScale l "uniform scale" R 0 10}
 uniformScale 1
 addUserKnob {6 invert +STARTLINE}
 addUserKnob {13 angleBetweenAxis l axis +HIDDEN}
 angleBetweenAxis {0 1 0}
 addUserKnob {4 angleConvertFrom l from +HIDDEN M {"\[-1, 1]" "\[ 0, 1]" radians degrees "" ""}}
 angleConvertFrom radians
 addUserKnob {4 angleConvertTo l to +HIDDEN M {"\[-1, 1]" "\[ 0, 1]" radians degrees "" "" ""}}
 angleConvertTo degrees
}
 Constant {
  inputs 0
  channels rgb
  name Constant1
  xpos 126
  ypos 173
 }
 Input {
  inputs 0
  name input
  xpos 256
  ypos 122
 }
 Switch {
  inputs 2
  which {{"1-\[exists parent.input0]"}}
  name Switch2
  xpos 256
  ypos 197
 }
set N6e270c00 [stack 0]
 Remove {
  operation keep
  channels rgba
  name Remove1
  xpos 358
  ypos 197
 }
 Input {
  inputs 0
  name value
  xpos 404
  ypos 119
  number 1
 }
 Switch {
  inputs 2
  which {{"1-\[exists parent.input1]"}}
  name Switch1
  xpos 404
  ypos 248
 }
push $N6e270c00
 BlinkScript {
  inputs 2
  recompileCount 476
  KernelDescription "2 \"vector\" iterate pixelWise 5000c4536052845eeca1238857bdf67901bcc199635ff76c60899bd7392186af 3 \"src\" Read Point \"srcB\" Read Point \"dst\" Write Point 27 \"size\" Int 1 AQAAAA== \"isolate\" Int 1 AQAAAA== \"category\" Int 1 AgAAAA== \"math_operation2\" Int 1 BQAAAA== \"math_operation3\" Int 1 BQAAAA== \"transform_operation\" Int 1 AwAAAA== \"utility_operation\" Int 1 AAAAAA== \"constant\" Int 1 AQAAAA== \"value\" Float 1 AAAAAA== \"value2\" Float 2 AAAAAAAAAAA= \"value3\" Float 3 AAAAAAAAAAAAAAAAAAAAAA== \"uniform\" Int 1 AAAAAA== \"translate2\" Float 2 AAAAAAAAAAA= \"translate3\" Float 3 AAAAAAAAAAAAAAAAAAAAAA== \"rotate\" Float 1 AAAAAA== \"rotate3\" Float 3 AAAAAAAAAAAAAAAAAAAAAA== \"rotateunit\" Int 1 AAAAAA== \"scale2\" Float 2 AACAPwAAgD8= \"scale3\" Float 3 AACAPwAAgD8AAIA/AAAAAA== \"uniformScale\" Float 1 AACAPw== \"transform_order\" Int 1 AAAAAA== \"rotate_order3\" Int 1 BAAAAA== \"invert\" Int 1 AAAAAA== \"constant_transform\" Int 1 AQAAAA== \"angle_between_axis\" Float 3 AAAAAAAAgD8AAAAAAAAAAA== \"angle_convert_from\" Int 1 AAAAAA== \"angleConvertTo\" Int 1 AwAAAA== 27 \"size\" 1 1 \"isolate\" 1 1 \"cat\" 1 1 \"math_op2\" 1 1 \"math_op3\" 1 1 \"trans_op\" 1 1 \"util_op\" 1 1 \"cons\" 1 1 \"val\" 1 1 \"val2\" 2 1 \"val3\" 3 1 \"uni\" 1 1 \"t2\" 2 1 \"t3\" 3 1 \"r2\" 1 1 \"r3\" 3 1 \"ru\" 1 1 \"s2\" 2 1 \"s3\" 3 1 \"us\" 1 1 \"to\" 1 1 \"ro3\" 1 1 \"inv\" 1 1 \"cons_trans\" 1 1 \"ab_axis\" 3 1 \"angConvFrom\" 1 1 \"angConvTo\" 1 1 0"
  kernelSource "#define PI 3.1415926535897932384626433832795028841971693993751058;\n\nfloat degrees(float rad)\{\n  return rad * 180.0 / PI;\n\}\nfloat2 degrees(float2 rad)\{\n  return float2(degrees(rad.x), degrees(rad.y));\n\}\nfloat3 degrees(float3 rad)\{\n  return float3(degrees(rad.x), degrees(rad.y), degrees(rad.z));\n\}\nfloat radians(float deg)\{\n  return deg / 180.0 * PI;\n\}\nfloat2 radians(float2 deg)\{\n  return float2(radians(deg.x), radians(deg.y));\n\}\nfloat3 radians(float3 deg)\{\n  return float3(radians(deg.x), radians(deg.y), radians(deg.z));\n\}\nfloat signedToRad(float signedf)\{\n  return ((signedf/2.0)+0.5) * PI ;\n\}\nfloat radToSigned(float rad)\{\n  rad = rad/ PI;\n  return ((rad-0.5)*2.0);\n\}\nfloat unsignedToRad(float unsignedf)\{\n  return unsignedf * 2.0 * PI;\n\}\nfloat radToUnsigned(float rad)\{\n  return (rad / 2.0) / PI;\n\}\n\nfloat3x3 ident3x3()\{\n  float3x3 mat;\n  mat\[0]\[0] = 1.0;\n  mat\[0]\[1] = 0.0;\n  mat\[0]\[2] = 0.0;\n  mat\[1]\[0] = 0.0;\n  mat\[1]\[1] = 1.0;\n  mat\[1]\[2] = 0.0;\n  mat\[2]\[0] = 0.0;\n  mat\[2]\[1] = 0.0;\n  mat\[2]\[2] = 1.0;\n  return mat;\n\}\nfloat4x4 ident4x4()\{\n  float4x4 mat;\n  mat\[0]\[0] = 1.0;\n  mat\[0]\[1] = 0.0;\n  mat\[0]\[2] = 0.0;\n  mat\[0]\[3] = 0.0;\n  mat\[1]\[0] = 0.0;\n  mat\[1]\[1] = 1.0;\n  mat\[1]\[2] = 0.0;\n  mat\[1]\[3] = 0.0;\n  mat\[2]\[0] = 0.0;\n  mat\[2]\[1] = 0.0;\n  mat\[2]\[2] = 1.0;\n  mat\[2]\[3] = 0.0;\n  mat\[3]\[0] = 0.0;\n  mat\[3]\[1] = 0.0;\n  mat\[3]\[2] = 0.0;\n  mat\[3]\[3] = 1.0;\n  return mat;\n\}\nfloat2 mult(float2 a, float3x3 mat)\{\n  return float2((a.x*mat\[0]\[0])+(a.y*mat\[0]\[1])+mat\[0]\[2],\n                (a.x*mat\[1]\[0])+(a.y*mat\[1]\[1])+mat\[1]\[2]);\n\}\nfloat3 mult(float3 a, float4x4 mat)\{\n  return float3((a.x*mat\[0]\[0])+(a.y*mat\[0]\[1])+(a.z*mat\[0]\[2])+mat\[0]\[3],\n                (a.x*mat\[1]\[0])+(a.y*mat\[1]\[1])+(a.z*mat\[1]\[2])+mat\[1]\[3],\n                (a.x*mat\[2]\[0])+(a.y*mat\[2]\[1])+(a.z*mat\[2]\[2])+mat\[2]\[3]);\n\}\nfloat3x3 translate(float2 t)\{\n  float3x3 mat = ident3x3();\n  mat\[0]\[2] = t.x;\n  mat\[1]\[2] = t.y;\n  return mat;\n\}\nfloat4x4 translate(float3 t)\{\n  float4x4 mat = ident4x4();\n  mat\[0]\[3] = t.x;\n  mat\[1]\[3] = t.y;\n  mat\[2]\[3] = t.z;\n  return mat;\n\}\nfloat3x3 rotate(float angle)\{\n  float3x3 mat = ident3x3();\n  mat\[0]\[0] = cos(angle);\n  mat\[0]\[1] = sin(angle);\n  mat\[1]\[0] = -sin(angle);\n  mat\[1]\[1] = cos(angle);\n  return mat;\n\}\nfloat4x4 rotateAxis(float angle, int axis)\{\n  float4x4 mat = ident4x4();\n  if(axis==0)\{      // X\n    mat\[1]\[1] =  cos(angle);\n    mat\[1]\[2] = -sin(angle);\n    mat\[2]\[1] =  sin(angle);\n    mat\[2]\[2] =  cos(angle);\n  \}else if(axis==1)\{// Y\n    mat\[0]\[0] =  cos(angle);\n    mat\[0]\[2] =  sin(angle);\n    mat\[2]\[0] = -sin(angle);\n    mat\[2]\[2] =  cos(angle);\n  \}else if(axis==2)\{// Z\n    mat\[0]\[0] =  cos(angle);\n    mat\[0]\[1] = -sin(angle);\n    mat\[1]\[0] =  sin(angle);\n    mat\[1]\[1] =  cos(angle);\n  \}\n  return mat;\n\}\nfloat4x4 rotate(float3 angle, int order)\{\n  float4x4 mat = ident4x4();\n  float4x4 x = rotateAxis(angle.x, 0);\n  float4x4 y = rotateAxis(angle.y, 1);\n  float4x4 z = rotateAxis(angle.z, 2);\n  if(order==0)\{       // XYZ\n    mat = z*y*x;\n  \}else  if(order==1)\{// XZY\n    mat = y*z*x;\n  \}else  if(order==2)\{// YXZ\n    mat = z*x*y;\n  \}else  if(order==3)\{// YZX\n    mat = x*z*y;\n  \}else  if(order==4)\{// ZXY\n    mat = y*x*z;\n  \}else  if(order==5)\{// ZYX\n    mat = x*y*z;\n  \}\n  return mat;\n\}\nfloat3x3 scale(float2 s)\{\n  float3x3 mat = ident3x3();\n  mat\[0]\[0] = s.x;\n  mat\[1]\[1] = s.y;\n  return mat;\n\}\nfloat4x4 scale(float3 s)\{\n  float4x4 mat = ident4x4();\n  mat\[0]\[0] = s.x;\n  mat\[1]\[1] = s.y;\n  mat\[2]\[2] = s.z;\n  return mat;\n\}\nfloat3x3 transform(float2 _t, float _r, float2 _s, int order)\{\n  float3x3 m = ident3x3();\n  float3x3 t = translate(_t);\n  float3x3 r = rotate(_r);\n  float3x3 s = scale(_s);\n  if(order==0)\{      // SRT\n    m = t*r*s;\n  \}else if(order==1)\{// STR\n    m = r*t*s;\n  \}else if(order==2)\{// RST\n    m = t*s*r;\n  \}else if(order==3)\{// RTS\n    m = s*t*r;\n  \}else if(order==4)\{// TSR\n    m = r*s*t;\n  \}else if(order==5)\{// TRS\n    m = s*r*t;\n  \}\n  return m;\n\}\nfloat4x4 transform(float3 _t, float3 _r, float3 _s, int order, int rot_order)\{\n  float4x4 m = ident4x4();\n  float4x4 t = translate(_t);\n  float4x4 r = rotate(_r, rot_order);\n  float4x4 s = scale(_s);\n  if(order==0)\{      // SRT\n    m = t*r*s;\n  \}else if(order==1)\{// STR\n    m = r*t*s;\n  \}else if(order==2)\{// RST\n    m = t*s*r;\n  \}else if(order==3)\{// RTS\n    m = s*t*r;\n  \}else if(order==4)\{// TSR\n    m = r*s*t;\n  \}else if(order==5)\{// TRS\n    m = s*r*t;\n  \}\n  return m;\n\}\nfloat3 cross(float3 A, float3 B)\{\n  return float3(A.y*B.z - A.z*B.y,\n                A.z*B.x - A.x*B.z,\n                A.x*B.y - A.y*B.x);\n\}\nfloat distance(float2 a, float2 b)\{\n  return length(a-b);\n\}\nfloat distance(float3 a, float3 b)\{\n  return length(a-b);\n\}\nfloat2 norm(float2 a)\{\n  return a/length(a);\n\}\nfloat3 norm(float3 a)\{\n  return a/length(a);\n\}\nfloat angleBetween(float3 a, float3 b, float3 axis)\{\n  a = norm(a);\n  b = norm(b);\n  axis = norm(axis);\n  float3 perp = norm(cross(b, axis));\n  float side = dot(a, perp);\n  float angle = acos(dot(a, b));\n  if(side<0.0)\{\n    angle = -angle + 2.0 * PI ;\n  \}\n  return angle;\n\}\n\nfloat angleBetween(float2 a, float2 b)\{\n  float dott = a.x*b.x + a.y*b.y;\n  float dett = a.x*b.y - a.y*b.x;\n  float angle = atan2(dett, dott);\n  if(angle<0)\{\n    angle = angle + 2.0 * PI;\n  \}\n  return angle;\n\}\nfloat angleConvert(float angle, int from, int to)\{\n  if(from==0)\{\n    angle = signedToRad(angle);\n  \}else if(from==1)\{\n    angle = unsignedToRad(angle);\n  \}else if(from==3)\{\n    angle = radians(angle);\n  \}\n  if(to==0)\{\n    angle = radToSigned(angle);\n  \}else if(to==1)\{\n    angle = radToUnsigned(angle);\n  \}else if(to==3)\{\n    angle = degrees(angle);\n  \}\n  return angle;\n\}\n\nkernel vector : ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessPoint, eEdgeClamped> src; // A\n  Image<eRead, eAccessPoint, eEdgeClamped> srcB; // B\n  Image<eWrite> dst; // the output image\n\n  param:\n    int size;\n    int isolate;\n    // op\n    int cat;\n    int math_op2;\n    int math_op3;\n    int trans_op;\n    int util_op;\n\n    int cons;\n    float val;\n    float2 val2;\n    float3 val3;\n    int uni;\n\n    // Transform\n    float2 t2;\n    float3 t3;\n    float r2;\n    float3 r3;\n    int ru;\n    float2 s2;\n    float3 s3;\n    float us;\n    int to;\n    int ro3;\n    int inv;\n    int cons_trans;\n\n    float3 ab_axis;\n    int angConvFrom;\n    int angConvTo;\n\n  void define()\{\n    defineParam(size, \"size\", 1);\n    defineParam(isolate, \"isolate\", 1);\n    // op\n    defineParam(cat, \"category\", 2);//transform\n    defineParam(math_op2, \"math_operation2\", 5);//normalize\n    defineParam(math_op3, \"math_operation3\", 5);//normalize\n    defineParam(trans_op, \"transform_operation\", 3);//transform\n    defineParam(util_op, \"utility_operation\", 0);//distance\n\n    defineParam(cons, \"constant\", int(1));\n    defineParam(val3, \"value3\", float3(0,0,0));\n    defineParam(val2, \"value2\", float2(0,0));\n    defineParam(val, \"value\", float(0));\n    defineParam(uni, \"uniform\", int(0));\n\n    // Transform\n    defineParam(cons_trans, \"constant_transform\", int(1));\n    defineParam(t2, \"translate2\", float2(0,0));\n    defineParam(t3, \"translate3\", float3(0,0,0));\n    defineParam(r2, \"rotate\", float(0));\n    defineParam(r3, \"rotate3\", float3(0,0,0));\n    defineParam(ru, \"rotateunit\", int(0));\n    defineParam(s2, \"scale2\", float2(1,1));\n    defineParam(s3, \"scale3\", float3(1,1,1));\n    defineParam(us, \"uniformScale\", float(1.0));\n    defineParam(to, \"transform_order\", 0);\n    defineParam(ro3, \"rotate_order3\", 4);\n    defineParam(inv, \"invert\", int(0));\n\n    defineParam(ab_axis, \"angle_between_axis\", float3(0,1,0));\n    defineParam(angConvFrom, \"angle_convert_from\", int(0));\n    defineParam(angConvTo, \"angleConvertTo\", int(3));\n\n  \}\n\n  void process() \{\n    float4 colA = src();\n    float4 colB = srcB();\n    if(isolate==1)\{\n      if(size==0)\{\n        colA.z = 0.0;\n      \}\n      //colA.w = 0.0;\n    \}\n\n    if(size==0)\{\n      // VECTOR 2\n      float2 A2 = float2(colA.x, colA.y);\n      if(cons==0)\{\n        val2 = float2(colB.x, colB.y);\n      \}else if(uni==1)\{\n        val2 = float2(val, val);\n      \}\n      if(cat==0)\{\n        // Initialize\n        A2 = val2;\n      \}else if(cat==1)\{\n        // Math\n        if(math_op2==0)\{\n          A2 += val2;\n        \}else if(math_op2==1)\{\n          A2 -= val2;\n        \}else if(math_op2==2)\{\n          A2 *= val2;\n        \}else if(math_op2==3)\{\n          A2 /= val2;\n        \}else if(math_op2==4)\{\n          A2 = fmod(A2, val2);\n        \}else if(math_op2==5)\{\n          A2 = norm(A2);\n        \}else if(math_op2==6)\{\n          float i = length(A2);\n          A2 = float2(i,i);\n        \}else if(math_op2==7)\{\n          float i = dot(A2, val2);\n          A2 = float2(i,i);\n        \}\n      \}else if(cat==2)\{\n        // Transform\n        float2 t = t2;\n        float r = r2;\n        float2 s = s2*us;\n        float3x3 m;\n        if(cons_trans==0 && trans_op!=3)\{\n          t = float2(colB.x, colB.y);\n          r = colB.x;\n          s = float2(colB.x, colB.y);\n        \}\n        if(ru==0)\{\n          r = radians(r);\n        \}\n        if(trans_op==0)\{\n          m = translate(t);\n        \}else if(trans_op==1)\{\n          m = rotate(r);\n        \}else if(trans_op==2)\{\n          m = scale(s);\n        \}else if(trans_op==3)\{\n          m = transform(t, r, s, to);\n        \}\n        if(inv==1)\{\n          m = m.invert();\n        \}\n        A2 = mult(A2, m);\n      \}else if(cat==3)\{\n        // Utility\n        if(util_op==0)\{\n          float i = distance(A2, val2);\n          A2 = float2(i,i);\n        \}else if(util_op==1)\{\n          float i = angleBetween(A2, val2);\n          A2 = float2(i,i);\n        \}else if(util_op==2)\{\n          float i = angleConvert(A2.x, angConvFrom, angConvTo);\n          A2 = float2(i,i);\n        \}\n      \}\n      dst() = float4(A2.x, A2.y, colA.z, colA.w);\n    \}else if(size==1)\{\n      // VECTOR 3\n      float3 A3 = float3(colA.x, colA.y, colA.z);\n      if(cons==0)\{\n        val3 = float3(colB.x, colB.y, colB.z);\n      \}else if(uni==1)\{\n        val3 = float3(val, val, val);\n      \}\n      if(cat==0)\{\n        // Initialize\n        A3 = val3;\n      \}else if(cat==1)\{\n        // Math\n        if(math_op3==0)\{\n          A3 += val3;\n        \}else if(math_op3==1)\{\n          A3 -= val3;\n        \}else if(math_op3==2)\{\n          A3 *= val3;\n        \}else if(math_op3==3)\{\n          A3 /= val3;\n        \}else if(math_op3==4)\{\n          A3 = fmod(A3, val3);\n        \}else if(math_op3==5)\{\n          A3 = norm(A3);\n        \}else if(math_op3==6)\{\n          float i = length(A3);\n          A3 = float3(i,i,i);\n        \}else if(math_op3==7)\{\n          float i = dot(A3, val3);\n          A3 = float3(i,i,i);\n        \}else if(math_op3==8)\{\n          A3 = cross(A3, val3);\n        \}\n      \}else if(cat==2)\{\n        // Transform\n        float3 t = t3;\n        float3 r = r3;\n        float3 s = s3*us;\n        if(cons_trans==0 && trans_op!=3)\{\n          t = float3(colB.x, colB.y, colB.z);\n          r = float3(colB.x, colB.y, colB.z);\n          s = float3(colB.x, colB.y, colB.z);\n        \}\n        float4x4 m;\n        if(ru==0)\{\n          r = radians(r);\n        \}\n        if(trans_op==0)\{\n          m = translate(t);\n        \}else if(trans_op==1)\{\n          m = rotate(r, ro3);\n        \}else if(trans_op==2)\{\n          m = scale(s);\n        \}else if(trans_op==3)\{\n          m = transform(t, r, s, to, ro3);\n        \}\n        if(inv==1)\{\n          m = m.invert();\n        \}\n        A3 = mult(A3, m);\n      \}else if(cat==3)\{\n        // Utility\n        if(util_op==0)\{\n          float i = distance(A3, val3);\n          A3 = float3(i,i,i);\n        \}else if(util_op==1)\{\n          float i = angleBetween(A3, val3, ab_axis);\n          A3 = float3(i,i,i);\n        \}else if(util_op==2)\{\n          float i = angleConvert(A3.x, angConvFrom, angConvTo);\n          A3 = float3(i,i,i);\n        \}\n      \}\n      dst() = float4(A3.x, A3.y, A3.z, colA.w);\n    \}\n  \}\n\};\n"
  rebuild ""
  vector_size {{parent.size}}
  vector_isolate {{parent.isolate}}
  vector_category {{parent.category}}
  vector_math_operation2 {{parent.math_op2}}
  vector_math_operation3 {{parent.math_op3}}
  vector_transform_operation {{parent.transform_op}}
  vector_utility_operation {{parent.utility_op}}
  vector_constant {{parent.constant}}
  vector_value {{parent.value}}
  vector_value2 {{parent.value2} {parent.value2}}
  vector_value3 {{parent.value3} {parent.value3} {parent.value3}}
  vector_uniform {{parent.uniform}}
  vector_translate2 {{parent.translate2} {parent.translate2}}
  vector_translate3 {{parent.translate3} {parent.translate3} {parent.translate3}}
  vector_rotate {{parent.rotate}}
  vector_rotate3 {{parent.rotate3} {parent.rotate3} {parent.rotate3}}
  vector_rotateunit {{parent.rotateunit}}
  vector_scale2 {{parent.scale2} {parent.scale2}}
  vector_scale3 {{parent.scale3} {parent.scale3} {parent.scale3}}
  vector_uniformScale {{parent.uniformScale}}
  vector_transform_order {{parent.transform_order}}
  vector_rotate_order3 {{parent.rotation_order3}}
  vector_invert {{parent.invert}}
  vector_constant_transform {{parent.constant_trans}}
  vector_angle_between_axis {{parent.angleBetweenAxis} {parent.angleBetweenAxis} {parent.angleBetweenAxis}}
  vector_angle_convert_from {{parent.angleConvertFrom}}
  vector_angleConvertTo {{parent.angleConvertTo}}
  rebuild_finalise ""
  name BlinkScript3
  xpos 256
  ypos 243
 }
 Output {
  name Output1
  xpos 256
  ypos 321
 }
end_group
